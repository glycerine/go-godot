package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewReferenceFromPointer(ptr gdnative.Pointer) Reference {
func newReferenceFromPointer(ptr gdnative.Pointer) Reference {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Reference{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Base class for any object that keeps a reference count. [Resource] and many other helper objects inherit this class. References keep an internal reference counter so that they are automatically released when no longer in use, and only then. References therefore do not need to be freed manually with [method Object.free]. In the vast majority of use cases, instantiating and using [Reference]-derived types is all you need to do. The methods provided in this class are only for advanced users, and can cause issues if misused.
*/
type Reference struct {
	Object
	owner gdnative.Object
}

func (o *Reference) BaseClass() string {
	return "Reference"
}

/*
        Initializes the internal reference counter. Use this only if you really know what you are doing. Returns whether the initialization was successful.
	Args: [], Returns: bool
*/
func (o *Reference) InitRef() gdnative.Bool {
	//log.Println("Calling Reference.InitRef()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Reference", "init_ref")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Increments the internal reference counter. Use this only if you really know what you are doing. Returns [code]true[/code] if the increment was successful, [code]false[/code] otherwise.
	Args: [], Returns: bool
*/
func (o *Reference) ReferenceMethod() gdnative.Bool {
	//log.Println("Calling Reference.ReferenceMethod()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Reference", "reference")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Decrements the internal reference counter. Use this only if you really know what you are doing. Returns [code]true[/code] if the decrement was successful, [code]false[/code] otherwise.
	Args: [], Returns: bool
*/
func (o *Reference) Unreference() gdnative.Bool {
	//log.Println("Calling Reference.Unreference()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Reference", "unreference")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

// ReferenceImplementer is an interface that implements the methods
// of the Reference class.
type ReferenceImplementer interface {
	ObjectImplementer
	InitRef() gdnative.Bool
	ReferenceMethod() gdnative.Bool
	Unreference() gdnative.Bool
}
