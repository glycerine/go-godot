package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewMultiMeshInstanceFromPointer(ptr gdnative.Pointer) MultiMeshInstance {
func newMultiMeshInstanceFromPointer(ptr gdnative.Pointer) MultiMeshInstance {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := MultiMeshInstance{}
	obj.SetBaseObject(owner)

	return obj
}

/*
[MultiMeshInstance] is a specialized node to instance [GeometryInstance]s based on a [MultiMesh] resource. This is useful to optimize the rendering of a high amount of instances of a given mesh (for example trees in a forest or grass strands).
*/
type MultiMeshInstance struct {
	GeometryInstance
	owner gdnative.Object
}

func (o *MultiMeshInstance) BaseClass() string {
	return "MultiMeshInstance"
}

/*
        Undocumented
	Args: [], Returns: MultiMesh
*/
func (o *MultiMeshInstance) GetMultimesh() MultiMeshImplementer {
	//log.Println("Calling MultiMeshInstance.GetMultimesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MultiMeshInstance", "get_multimesh")

	// Call the parent method.
	// MultiMesh
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMultiMeshFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MultiMeshImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "MultiMesh" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MultiMeshImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false multimesh MultiMesh}], Returns: void
*/
func (o *MultiMeshInstance) SetMultimesh(multimesh MultiMeshImplementer) {
	//log.Println("Calling MultiMeshInstance.SetMultimesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(multimesh.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MultiMeshInstance", "set_multimesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// MultiMeshInstanceImplementer is an interface that implements the methods
// of the MultiMeshInstance class.
type MultiMeshInstanceImplementer interface {
	GeometryInstanceImplementer
	GetMultimesh() MultiMeshImplementer
	SetMultimesh(multimesh MultiMeshImplementer)
}
