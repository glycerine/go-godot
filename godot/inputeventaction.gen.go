package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewInputEventActionFromPointer(ptr gdnative.Pointer) InputEventAction {
func newInputEventActionFromPointer(ptr gdnative.Pointer) InputEventAction {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := InputEventAction{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Contains a generic action which can be targeted from several types of inputs. Actions can be created from the [b]Input Map[/b] tab in the [b]Project > Project Settings[/b] menu. See [method Node._input].
*/
type InputEventAction struct {
	InputEvent
	owner gdnative.Object
}

func (o *InputEventAction) BaseClass() string {
	return "InputEventAction"
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *InputEventAction) GetAction() gdnative.String {
	//log.Println("Calling InputEventAction.GetAction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventAction", "get_action")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false action String}], Returns: void
*/
func (o *InputEventAction) SetAction(action gdnative.String) {
	//log.Println("Calling InputEventAction.SetAction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(action)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventAction", "set_action")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false pressed bool}], Returns: void
*/
func (o *InputEventAction) SetPressed(pressed gdnative.Bool) {
	//log.Println("Calling InputEventAction.SetPressed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(pressed)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("InputEventAction", "set_pressed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// InputEventActionImplementer is an interface that implements the methods
// of the InputEventAction class.
type InputEventActionImplementer interface {
	InputEventImplementer
	GetAction() gdnative.String
	SetAction(action gdnative.String)
	SetPressed(pressed gdnative.Bool)
}
