package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewFuncRefFromPointer(ptr gdnative.Pointer) FuncRef {
func newFuncRefFromPointer(ptr gdnative.Pointer) FuncRef {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := FuncRef{}
	obj.SetBaseObject(owner)

	return obj
}

/*
In GDScript, functions are not [i]first-class objects[/i]. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments. However, by creating a [FuncRef] using the [method @GDScript.funcref] function, a reference to a function in a given object can be created, passed around and called.
*/
type FuncRef struct {
	Reference
	owner gdnative.Object
}

func (o *FuncRef) BaseClass() string {
	return "FuncRef"
}

/*
        Calls the referenced function previously set by [method set_function] or [method @GDScript.funcref].
	Args: [], Returns: Variant
*/
func (o *FuncRef) CallFunc() gdnative.Variant {
	//log.Println("Calling FuncRef.CallFunc()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FuncRef", "call_func")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        The name of the referenced function to call on the object, without parentheses or any parameters.
	Args: [{ false name String}], Returns: void
*/
func (o *FuncRef) SetFunction(name gdnative.String) {
	//log.Println("Calling FuncRef.SetFunction()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FuncRef", "set_function")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        The object containing the referenced function. This object must be of a type actually inheriting from [Object], not a built-in type such as [int], [Vector2] or [Dictionary].
	Args: [{ false instance Object}], Returns: void
*/
func (o *FuncRef) SetInstance(instance ObjectImplementer) {
	//log.Println("Calling FuncRef.SetInstance()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(instance.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("FuncRef", "set_instance")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// FuncRefImplementer is an interface that implements the methods
// of the FuncRef class.
type FuncRefImplementer interface {
	ReferenceImplementer
	CallFunc() gdnative.Variant
	SetFunction(name gdnative.String)
	SetInstance(instance ObjectImplementer)
}
