package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPacketPeerFromPointer(ptr gdnative.Pointer) PacketPeer {
func newPacketPeerFromPointer(ptr gdnative.Pointer) PacketPeer {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PacketPeer{}
	obj.SetBaseObject(owner)

	return obj
}

/*
PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low-level bytes or having to worry about network ordering.
*/
type PacketPeer struct {
	Reference
	owner gdnative.Object
}

func (o *PacketPeer) BaseClass() string {
	return "PacketPeer"
}

/*
        Returns the number of packets currently available in the ring-buffer.
	Args: [], Returns: int
*/
func (o *PacketPeer) GetAvailablePacketCount() gdnative.Int {
	//log.Println("Calling PacketPeer.GetAvailablePacketCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeer", "get_available_packet_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Gets a raw packet.
	Args: [], Returns: PoolByteArray
*/
func (o *PacketPeer) GetPacket() gdnative.PoolByteArray {
	//log.Println("Calling PacketPeer.GetPacket()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeer", "get_packet")

	// Call the parent method.
	// PoolByteArray
	retPtr := gdnative.NewEmptyPoolByteArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolByteArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the error state of the last packet received (via [method get_packet] and [method get_var]).
	Args: [], Returns: enum.Error
*/
func (o *PacketPeer) GetPacketError() gdnative.Error {
	//log.Println("Calling PacketPeer.GetPacketError()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeer", "get_packet_error")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Gets a Variant. If [code]allow_objects[/code] (or [member allow_object_decoding]) is [code]true[/code], decoding objects is allowed. [b]Warning:[/b] Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution.
	Args: [], Returns: Variant
*/
func (o *PacketPeer) GetVar() gdnative.Variant {
	//log.Println("Calling PacketPeer.GetVar()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeer", "get_var")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *PacketPeer) IsObjectDecodingAllowed() gdnative.Bool {
	//log.Println("Calling PacketPeer.IsObjectDecodingAllowed()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeer", "is_object_decoding_allowed")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Sends a raw packet.
	Args: [{ false buffer PoolByteArray}], Returns: enum.Error
*/
func (o *PacketPeer) PutPacket(buffer gdnative.PoolByteArray) gdnative.Error {
	//log.Println("Calling PacketPeer.PutPacket()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolByteArray(buffer)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeer", "put_packet")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Sends a [Variant] as a packet. If [code]full_objects[/code] (or [member allow_object_decoding]) is [code]true[/code], encoding objects is allowed (and can potentially include code).
	Args: [{ false var Variant}], Returns: enum.Error
*/
func (o *PacketPeer) PutVar(variable gdnative.Variant) gdnative.Error {
	//log.Println("Calling PacketPeer.PutVar()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVariant(variable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeer", "put_var")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *PacketPeer) SetAllowObjectDecoding(enable gdnative.Bool) {
	//log.Println("Calling PacketPeer.SetAllowObjectDecoding()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PacketPeer", "set_allow_object_decoding")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// PacketPeerImplementer is an interface that implements the methods
// of the PacketPeer class.
type PacketPeerImplementer interface {
	ReferenceImplementer
	GetAvailablePacketCount() gdnative.Int
	GetPacket() gdnative.PoolByteArray
	GetVar() gdnative.Variant
	IsObjectDecodingAllowed() gdnative.Bool
	SetAllowObjectDecoding(enable gdnative.Bool)
}
