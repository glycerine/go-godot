package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// _ThreadPriority is an enum for Priority values.
type _ThreadPriority int

const (
	_ThreadPriorityHigh   _ThreadPriority = 2
	_ThreadPriorityLow    _ThreadPriority = 0
	_ThreadPriorityNormal _ThreadPriority = 1
)

//func NewThreadFromPointer(ptr gdnative.Pointer) Thread {
func new_ThreadFromPointer(ptr gdnative.Pointer) Thread {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Thread{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A unit of execution in a process. Can run methods on [Object]s simultaneously. The use of synchronization via [Mutex] or [Semaphore] is advised if working with shared objects.
*/
type Thread struct {
	Reference
	owner gdnative.Object
}

func (o *Thread) BaseClass() string {
	return "_Thread"
}

/*
        Undocumented
	Args: [], Returns: String
*/
func (o *Thread) GetId() gdnative.String {
	//log.Println("Calling _Thread.GetId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Thread", "get_id")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *Thread) IsActive() gdnative.Bool {
	//log.Println("Calling _Thread.IsActive()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Thread", "is_active")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false instance Object} { false method String} {Null true userdata Variant} {1 true priority int}], Returns: enum.Error
*/
func (o *Thread) Start(instance ObjectImplementer, method gdnative.String, userdata gdnative.Variant, priority gdnative.Int) gdnative.Error {
	//log.Println("Calling _Thread.Start()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromObject(instance.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(method)
	ptrArguments[2] = gdnative.NewPointerFromVariant(userdata)
	ptrArguments[3] = gdnative.NewPointerFromInt(priority)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Thread", "start")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [], Returns: Variant
*/
func (o *Thread) WaitToFinish() gdnative.Variant {
	//log.Println("Calling _Thread.WaitToFinish()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Thread", "wait_to_finish")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

// ThreadImplementer is an interface that implements the methods
// of the Thread class.
type ThreadImplementer interface {
	ReferenceImplementer
	GetId() gdnative.String
	IsActive() gdnative.Bool
	WaitToFinish() gdnative.Variant
}
