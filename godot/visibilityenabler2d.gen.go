package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// VisibilityEnabler2DEnabler is an enum for Enabler values.
type VisibilityEnabler2DEnabler int

const (
	VisibilityEnabler2DEnablerFreezeBodies         VisibilityEnabler2DEnabler = 1
	VisibilityEnabler2DEnablerMax                  VisibilityEnabler2DEnabler = 6
	VisibilityEnabler2DEnablerParentPhysicsProcess VisibilityEnabler2DEnabler = 4
	VisibilityEnabler2DEnablerParentProcess        VisibilityEnabler2DEnabler = 3
	VisibilityEnabler2DEnablerPauseAnimatedSprites VisibilityEnabler2DEnabler = 5
	VisibilityEnabler2DEnablerPauseAnimations      VisibilityEnabler2DEnabler = 0
	VisibilityEnabler2DEnablerPauseParticles       VisibilityEnabler2DEnabler = 2
)

//func NewVisibilityEnabler2DFromPointer(ptr gdnative.Pointer) VisibilityEnabler2D {
func newVisibilityEnabler2DFromPointer(ptr gdnative.Pointer) VisibilityEnabler2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VisibilityEnabler2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*
The VisibilityEnabler2D will disable [RigidBody2D], [AnimationPlayer], and other nodes when they are not visible. It will only affect nodes with the same root node as the VisibilityEnabler2D, and the root node itself.
*/
type VisibilityEnabler2D struct {
	VisibilityNotifier2D
	owner gdnative.Object
}

func (o *VisibilityEnabler2D) BaseClass() string {
	return "VisibilityEnabler2D"
}

/*
        Undocumented
	Args: [{ false arg0 Object}], Returns: void
*/
func (o *VisibilityEnabler2D) X_NodeRemoved(arg0 ObjectImplementer) {
	//log.Println("Calling VisibilityEnabler2D.X_NodeRemoved()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisibilityEnabler2D", "_node_removed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false enabler int}], Returns: bool
*/
func (o *VisibilityEnabler2D) IsEnablerEnabled(enabler gdnative.Int) gdnative.Bool {
	//log.Println("Calling VisibilityEnabler2D.IsEnablerEnabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(enabler)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisibilityEnabler2D", "is_enabler_enabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false enabler int} { false enabled bool}], Returns: void
*/
func (o *VisibilityEnabler2D) SetEnabler(enabler gdnative.Int, enabled gdnative.Bool) {
	//log.Println("Calling VisibilityEnabler2D.SetEnabler()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(enabler)
	ptrArguments[1] = gdnative.NewPointerFromBool(enabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VisibilityEnabler2D", "set_enabler")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VisibilityEnabler2DImplementer is an interface that implements the methods
// of the VisibilityEnabler2D class.
type VisibilityEnabler2DImplementer interface {
	VisibilityNotifier2DImplementer
	X_NodeRemoved(arg0 ObjectImplementer)
	IsEnablerEnabled(enabler gdnative.Int) gdnative.Bool
	SetEnabler(enabler gdnative.Int, enabled gdnative.Bool)
}
