package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPopupMenuFromPointer(ptr gdnative.Pointer) PopupMenu {
func newPopupMenuFromPointer(ptr gdnative.Pointer) PopupMenu {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := PopupMenu{}
	obj.SetBaseObject(owner)

	return obj
}

/*
[PopupMenu] is a [Control] that displays a list of options. They are popular in toolbars or context menus.
*/
type PopupMenu struct {
	Popup
	owner gdnative.Object
}

func (o *PopupMenu) BaseClass() string {
	return "PopupMenu"
}

/*
        Undocumented
	Args: [], Returns: Array
*/
func (o *PopupMenu) X_GetItems() gdnative.Array {
	//log.Println("Calling PopupMenu.X_GetItems()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "_get_items")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false arg0 InputEvent}], Returns: void
*/
func (o *PopupMenu) X_GuiInput(arg0 InputEventImplementer) {
	//log.Println("Calling PopupMenu.X_GuiInput()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(arg0.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "_gui_input")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false arg0 Array}], Returns: void
*/
func (o *PopupMenu) X_SetItems(arg0 gdnative.Array) {
	//log.Println("Calling PopupMenu.X_SetItems()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromArray(arg0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "_set_items")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *PopupMenu) X_SubmenuTimeout() {
	//log.Println("Calling PopupMenu.X_SubmenuTimeout()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "_submenu_timeout")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a new checkable item with text [code]label[/code]. An [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators. [b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it.
	Args: [{ false label String} {-1 true id int} {0 true accel int}], Returns: void
*/
func (o *PopupMenu) AddCheckItem(label gdnative.String, id gdnative.Int, accel gdnative.Int) {
	//log.Println("Calling PopupMenu.AddCheckItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(label)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)
	ptrArguments[2] = gdnative.NewPointerFromInt(accel)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_check_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a new checkable item and assigns the specified [ShortCut] to it. Sets the label of the checkbox to the [ShortCut]'s name. An [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index. [b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it.
	Args: [{ false shortcut ShortCut} {-1 true id int} {False true global bool}], Returns: void
*/
func (o *PopupMenu) AddCheckShortcut(shortcut ShortCutImplementer, id gdnative.Int, global gdnative.Bool) {
	//log.Println("Calling PopupMenu.AddCheckShortcut()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(shortcut.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromInt(id)
	ptrArguments[2] = gdnative.NewPointerFromBool(global)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_check_shortcut")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a new checkable item with text [code]label[/code] and icon [code]texture[/code]. An [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators. [b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it.
	Args: [{ false texture Texture} { false label String} {-1 true id int} {0 true accel int}], Returns: void
*/
func (o *PopupMenu) AddIconCheckItem(texture TextureImplementer, label gdnative.String, id gdnative.Int, accel gdnative.Int) {
	//log.Println("Calling PopupMenu.AddIconCheckItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(label)
	ptrArguments[2] = gdnative.NewPointerFromInt(id)
	ptrArguments[3] = gdnative.NewPointerFromInt(accel)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_icon_check_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a new checkable item and assigns the specified [ShortCut] and icon [code]texture[/code] to it. Sets the label of the checkbox to the [ShortCut]'s name. An [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index. [b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it.
	Args: [{ false texture Texture} { false shortcut ShortCut} {-1 true id int} {False true global bool}], Returns: void
*/
func (o *PopupMenu) AddIconCheckShortcut(texture TextureImplementer, shortcut ShortCutImplementer, id gdnative.Int, global gdnative.Bool) {
	//log.Println("Calling PopupMenu.AddIconCheckShortcut()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromObject(shortcut.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromInt(id)
	ptrArguments[3] = gdnative.NewPointerFromBool(global)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_icon_check_shortcut")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a new item with text [code]label[/code] and icon [code]texture[/code]. An [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators.
	Args: [{ false texture Texture} { false label String} {-1 true id int} {0 true accel int}], Returns: void
*/
func (o *PopupMenu) AddIconItem(texture TextureImplementer, label gdnative.String, id gdnative.Int, accel gdnative.Int) {
	//log.Println("Calling PopupMenu.AddIconItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromString(label)
	ptrArguments[2] = gdnative.NewPointerFromInt(id)
	ptrArguments[3] = gdnative.NewPointerFromInt(accel)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_icon_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a new item and assigns the specified [ShortCut] and icon [code]texture[/code] to it. Sets the label of the checkbox to the [ShortCut]'s name. An [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index.
	Args: [{ false texture Texture} { false shortcut ShortCut} {-1 true id int} {False true global bool}], Returns: void
*/
func (o *PopupMenu) AddIconShortcut(texture TextureImplementer, shortcut ShortCutImplementer, id gdnative.Int, global gdnative.Bool) {
	//log.Println("Calling PopupMenu.AddIconShortcut()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 4, 4)
	ptrArguments[0] = gdnative.NewPointerFromObject(texture.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromObject(shortcut.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromInt(id)
	ptrArguments[3] = gdnative.NewPointerFromBool(global)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_icon_shortcut")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a new item with text [code]label[/code]. An [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators.
	Args: [{ false label String} {-1 true id int} {0 true accel int}], Returns: void
*/
func (o *PopupMenu) AddItem(label gdnative.String, id gdnative.Int, accel gdnative.Int) {
	//log.Println("Calling PopupMenu.AddItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(label)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)
	ptrArguments[2] = gdnative.NewPointerFromInt(accel)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a new radio button with text [code]label[/code]. An [code]id[/code] can optionally be provided, as well as an accelerator ([code]accel[/code]). If no [code]id[/code] is provided, one will be created from the index. If no [code]accel[/code] is provided then the default [code]0[/code] will be assigned to it. See [method get_item_accelerator] for more info on accelerators. [b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it.
	Args: [{ false label String} {-1 true id int} {0 true accel int}], Returns: void
*/
func (o *PopupMenu) AddRadioCheckItem(label gdnative.String, id gdnative.Int, accel gdnative.Int) {
	//log.Println("Calling PopupMenu.AddRadioCheckItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(label)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)
	ptrArguments[2] = gdnative.NewPointerFromInt(accel)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_radio_check_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a new radio check button and assigns a [ShortCut] to it. Sets the label of the checkbox to the [ShortCut]'s name. An [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index. [b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See [method set_item_checked] for more info on how to control it.
	Args: [{ false shortcut ShortCut} {-1 true id int} {False true global bool}], Returns: void
*/
func (o *PopupMenu) AddRadioCheckShortcut(shortcut ShortCutImplementer, id gdnative.Int, global gdnative.Bool) {
	//log.Println("Calling PopupMenu.AddRadioCheckShortcut()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(shortcut.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromInt(id)
	ptrArguments[2] = gdnative.NewPointerFromBool(global)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_radio_check_shortcut")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a separator between items. Separators also occupy an index.
	Args: [{ true label String}], Returns: void
*/
func (o *PopupMenu) AddSeparator(label gdnative.String) {
	//log.Println("Calling PopupMenu.AddSeparator()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(label)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_separator")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds a [ShortCut]. An [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index.
	Args: [{ false shortcut ShortCut} {-1 true id int} {False true global bool}], Returns: void
*/
func (o *PopupMenu) AddShortcut(shortcut ShortCutImplementer, id gdnative.Int, global gdnative.Bool) {
	//log.Println("Calling PopupMenu.AddShortcut()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromObject(shortcut.GetBaseObject())
	ptrArguments[1] = gdnative.NewPointerFromInt(id)
	ptrArguments[2] = gdnative.NewPointerFromBool(global)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_shortcut")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Adds an item that will act as a submenu of the parent [PopupMenu] node when clicked. The [code]submenu[/code] argument is the name of the child [PopupMenu] node that will be shown when the item is clicked. An [code]id[/code] can optionally be provided. If no [code]id[/code] is provided, one will be created from the index.
	Args: [{ false label String} { false submenu String} {-1 true id int}], Returns: void
*/
func (o *PopupMenu) AddSubmenuItem(label gdnative.String, submenu gdnative.String, id gdnative.Int) {
	//log.Println("Calling PopupMenu.AddSubmenuItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromString(label)
	ptrArguments[1] = gdnative.NewPointerFromString(submenu)
	ptrArguments[2] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "add_submenu_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Removes all items from the [PopupMenu].
	Args: [], Returns: void
*/
func (o *PopupMenu) Clear() {
	//log.Println("Calling PopupMenu.Clear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the accelerator of the item at index [code]idx[/code]. Accelerators are special combinations of keys that activate the item, no matter which control is focused.
	Args: [{ false idx int}], Returns: int
*/
func (o *PopupMenu) GetItemAccelerator(idx gdnative.Int) gdnative.Int {
	//log.Println("Calling PopupMenu.GetItemAccelerator()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_item_accelerator")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the number of items in the [PopupMenu].
	Args: [], Returns: int
*/
func (o *PopupMenu) GetItemCount() gdnative.Int {
	//log.Println("Calling PopupMenu.GetItemCount()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_item_count")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the icon of the item at index [code]idx[/code].
	Args: [{ false idx int}], Returns: Texture
*/
func (o *PopupMenu) GetItemIcon(idx gdnative.Int) TextureImplementer {
	//log.Println("Calling PopupMenu.GetItemIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_item_icon")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*
        Returns the id of the item at index [code]idx[/code]. [code]id[/code] can be manually assigned, while index can not.
	Args: [{ false idx int}], Returns: int
*/
func (o *PopupMenu) GetItemId(idx gdnative.Int) gdnative.Int {
	//log.Println("Calling PopupMenu.GetItemId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_item_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the index of the item containing the specified [code]id[/code]. Index is automatically assigned to each item by the engine. Index can not be set manually.
	Args: [{ false id int}], Returns: int
*/
func (o *PopupMenu) GetItemIndex(id gdnative.Int) gdnative.Int {
	//log.Println("Calling PopupMenu.GetItemIndex()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_item_index")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the metadata of the specified item, which might be of any type. You can set it with [method set_item_metadata], which provides a simple way of assigning context data to items.
	Args: [{ false idx int}], Returns: Variant
*/
func (o *PopupMenu) GetItemMetadata(idx gdnative.Int) gdnative.Variant {
	//log.Println("Calling PopupMenu.GetItemMetadata()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_item_metadata")

	// Call the parent method.
	// Variant
	retPtr := gdnative.NewEmptyVariant()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVariantFromPointer(retPtr)
	return ret
}

/*
        Returns the [ShortCut] associated with the specified [code]idx[/code] item.
	Args: [{ false idx int}], Returns: ShortCut
*/
func (o *PopupMenu) GetItemShortcut(idx gdnative.Int) ShortCutImplementer {
	//log.Println("Calling PopupMenu.GetItemShortcut()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_item_shortcut")

	// Call the parent method.
	// ShortCut
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newShortCutFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(ShortCutImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "ShortCut" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(ShortCutImplementer)
	}

	return &ret
}

/*
        Returns the submenu name of the item at index [code]idx[/code]. See [method add_submenu_item] for more info on how to add a submenu.
	Args: [{ false idx int}], Returns: String
*/
func (o *PopupMenu) GetItemSubmenu(idx gdnative.Int) gdnative.String {
	//log.Println("Calling PopupMenu.GetItemSubmenu()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_item_submenu")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the text of the item at index [code]idx[/code].
	Args: [{ false idx int}], Returns: String
*/
func (o *PopupMenu) GetItemText(idx gdnative.Int) gdnative.String {
	//log.Println("Calling PopupMenu.GetItemText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_item_text")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the tooltip associated with the specified index index [code]idx[/code].
	Args: [{ false idx int}], Returns: String
*/
func (o *PopupMenu) GetItemTooltip(idx gdnative.Int) gdnative.String {
	//log.Println("Calling PopupMenu.GetItemTooltip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_item_tooltip")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *PopupMenu) GetSubmenuPopupDelay() gdnative.Real {
	//log.Println("Calling PopupMenu.GetSubmenuPopupDelay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "get_submenu_popup_delay")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *PopupMenu) IsHideOnCheckableItemSelection() gdnative.Bool {
	//log.Println("Calling PopupMenu.IsHideOnCheckableItemSelection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "is_hide_on_checkable_item_selection")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *PopupMenu) IsHideOnItemSelection() gdnative.Bool {
	//log.Println("Calling PopupMenu.IsHideOnItemSelection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "is_hide_on_item_selection")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: bool
*/
func (o *PopupMenu) IsHideOnStateItemSelection() gdnative.Bool {
	//log.Println("Calling PopupMenu.IsHideOnStateItemSelection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "is_hide_on_state_item_selection")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns whether the popup will be hidden when the window loses focus or not.
	Args: [], Returns: bool
*/
func (o *PopupMenu) IsHideOnWindowLoseFocus() gdnative.Bool {
	//log.Println("Calling PopupMenu.IsHideOnWindowLoseFocus()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "is_hide_on_window_lose_focus")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the item at index [code]idx[/code] is checkable in some way, i.e. if it has a checkbox or radio button. [b]Note:[/b] Checkable items just display a checkmark or radio button, but don't have any built-in checking behavior and must be checked/unchecked manually.
	Args: [{ false idx int}], Returns: bool
*/
func (o *PopupMenu) IsItemCheckable(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling PopupMenu.IsItemCheckable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "is_item_checkable")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the item at index [code]idx[/code] is checked.
	Args: [{ false idx int}], Returns: bool
*/
func (o *PopupMenu) IsItemChecked(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling PopupMenu.IsItemChecked()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "is_item_checked")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the item at index [code]idx[/code] is disabled. When it is disabled it can't be selected, or its action invoked. See [method set_item_disabled] for more info on how to disable an item.
	Args: [{ false idx int}], Returns: bool
*/
func (o *PopupMenu) IsItemDisabled(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling PopupMenu.IsItemDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "is_item_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the item at index [code]idx[/code] has radio button-style checkability. [b]Note:[/b] This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups.
	Args: [{ false idx int}], Returns: bool
*/
func (o *PopupMenu) IsItemRadioCheckable(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling PopupMenu.IsItemRadioCheckable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "is_item_radio_checkable")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if the item is a separator. If it is, it will be displayed as a line. See [method add_separator] for more info on how to add a separator.
	Args: [{ false idx int}], Returns: bool
*/
func (o *PopupMenu) IsItemSeparator(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling PopupMenu.IsItemSeparator()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "is_item_separator")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns whether the shortcut of the specified item [code]idx[/code] is disabled or not.
	Args: [{ false idx int}], Returns: bool
*/
func (o *PopupMenu) IsItemShortcutDisabled(idx gdnative.Int) gdnative.Bool {
	//log.Println("Calling PopupMenu.IsItemShortcutDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "is_item_shortcut_disabled")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Removes the item at index [code]idx[/code] from the menu. [b]Note:[/b] The indices of items after the removed item will be shifted by one.
	Args: [{ false idx int}], Returns: void
*/
func (o *PopupMenu) RemoveItem(idx gdnative.Int) {
	//log.Println("Calling PopupMenu.RemoveItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "remove_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *PopupMenu) SetHideOnCheckableItemSelection(enable gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetHideOnCheckableItemSelection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_hide_on_checkable_item_selection")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *PopupMenu) SetHideOnItemSelection(enable gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetHideOnItemSelection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_hide_on_item_selection")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false enable bool}], Returns: void
*/
func (o *PopupMenu) SetHideOnStateItemSelection(enable gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetHideOnStateItemSelection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_hide_on_state_item_selection")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Hides the [PopupMenu] when the window loses focus.
	Args: [{ false enable bool}], Returns: void
*/
func (o *PopupMenu) SetHideOnWindowLoseFocus(enable gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetHideOnWindowLoseFocus()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_hide_on_window_lose_focus")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the accelerator of the item at index [code]idx[/code]. Accelerators are special combinations of keys that activate the item, no matter which control is focused.
	Args: [{ false idx int} { false accel int}], Returns: void
*/
func (o *PopupMenu) SetItemAccelerator(idx gdnative.Int, accel gdnative.Int) {
	//log.Println("Calling PopupMenu.SetItemAccelerator()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromInt(accel)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_accelerator")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets whether the item at index [code]idx[/code] has a checkbox. If [code]false[/code], sets the type of the item to plain text. [b]Note:[/b] Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.
	Args: [{ false idx int} { false enable bool}], Returns: void
*/
func (o *PopupMenu) SetItemAsCheckable(idx gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetItemAsCheckable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_as_checkable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the type of the item at the specified index [code]idx[/code] to radio button. If false, sets the type of the item to plain text.
	Args: [{ false idx int} { false enable bool}], Returns: void
*/
func (o *PopupMenu) SetItemAsRadioCheckable(idx gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetItemAsRadioCheckable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_as_radio_checkable")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Mark the item at index [code]idx[/code] as a separator, which means that it would be displayed as a line. If [code]false[/code], sets the type of the item to plain text.
	Args: [{ false idx int} { false enable bool}], Returns: void
*/
func (o *PopupMenu) SetItemAsSeparator(idx gdnative.Int, enable gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetItemAsSeparator()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(enable)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_as_separator")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the checkstate status of the item at index [code]idx[/code].
	Args: [{ false idx int} { false checked bool}], Returns: void
*/
func (o *PopupMenu) SetItemChecked(idx gdnative.Int, checked gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetItemChecked()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(checked)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_checked")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets whether the item at index [code]idx[/code] is disabled or not. When it is disabled, it can't be selected and its action can't be invoked.
	Args: [{ false idx int} { false disabled bool}], Returns: void
*/
func (o *PopupMenu) SetItemDisabled(idx gdnative.Int, disabled gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetItemDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_disabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Replaces the [Texture] icon of the specified [code]idx[/code].
	Args: [{ false idx int} { false icon Texture}], Returns: void
*/
func (o *PopupMenu) SetItemIcon(idx gdnative.Int, icon TextureImplementer) {
	//log.Println("Calling PopupMenu.SetItemIcon()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromObject(icon.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_icon")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the [code]id[/code] of the item at index [code]idx[/code].
	Args: [{ false idx int} { false id int}], Returns: void
*/
func (o *PopupMenu) SetItemId(idx gdnative.Int, id gdnative.Int) {
	//log.Println("Calling PopupMenu.SetItemId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the metadata of an item, which may be of any type. You can later get it with [method get_item_metadata], which provides a simple way of assigning context data to items.
	Args: [{ false idx int} { false metadata Variant}], Returns: void
*/
func (o *PopupMenu) SetItemMetadata(idx gdnative.Int, metadata gdnative.Variant) {
	//log.Println("Calling PopupMenu.SetItemMetadata()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromVariant(metadata)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_metadata")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false idx int} { false state int}], Returns: void
*/
func (o *PopupMenu) SetItemMultistate(idx gdnative.Int, state gdnative.Int) {
	//log.Println("Calling PopupMenu.SetItemMultistate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromInt(state)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_multistate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets a [ShortCut] for the specified item [code]idx[/code].
	Args: [{ false idx int} { false shortcut ShortCut} {False true global bool}], Returns: void
*/
func (o *PopupMenu) SetItemShortcut(idx gdnative.Int, shortcut ShortCutImplementer, global gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetItemShortcut()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 3, 3)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromObject(shortcut.GetBaseObject())
	ptrArguments[2] = gdnative.NewPointerFromBool(global)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_shortcut")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Disables the [ShortCut] of the specified index [code]idx[/code].
	Args: [{ false idx int} { false disabled bool}], Returns: void
*/
func (o *PopupMenu) SetItemShortcutDisabled(idx gdnative.Int, disabled gdnative.Bool) {
	//log.Println("Calling PopupMenu.SetItemShortcutDisabled()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromBool(disabled)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_shortcut_disabled")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the submenu of the item at index [code]idx[/code]. The submenu is the name of a child [PopupMenu] node that would be shown when the item is clicked.
	Args: [{ false idx int} { false submenu String}], Returns: void
*/
func (o *PopupMenu) SetItemSubmenu(idx gdnative.Int, submenu gdnative.String) {
	//log.Println("Calling PopupMenu.SetItemSubmenu()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromString(submenu)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_submenu")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the text of the item at index [code]idx[/code].
	Args: [{ false idx int} { false text String}], Returns: void
*/
func (o *PopupMenu) SetItemText(idx gdnative.Int, text gdnative.String) {
	//log.Println("Calling PopupMenu.SetItemText()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromString(text)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_text")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the [String] tooltip of the item at the specified index [code]idx[/code].
	Args: [{ false idx int} { false tooltip String}], Returns: void
*/
func (o *PopupMenu) SetItemTooltip(idx gdnative.Int, tooltip gdnative.String) {
	//log.Println("Calling PopupMenu.SetItemTooltip()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)
	ptrArguments[1] = gdnative.NewPointerFromString(tooltip)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_item_tooltip")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false seconds float}], Returns: void
*/
func (o *PopupMenu) SetSubmenuPopupDelay(seconds gdnative.Real) {
	//log.Println("Calling PopupMenu.SetSubmenuPopupDelay()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(seconds)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "set_submenu_popup_delay")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Toggles the check state of the item of the specified index [code]idx[/code].
	Args: [{ false idx int}], Returns: void
*/
func (o *PopupMenu) ToggleItemChecked(idx gdnative.Int) {
	//log.Println("Calling PopupMenu.ToggleItemChecked()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "toggle_item_checked")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false idx int}], Returns: void
*/
func (o *PopupMenu) ToggleItemMultistate(idx gdnative.Int) {
	//log.Println("Calling PopupMenu.ToggleItemMultistate()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(idx)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("PopupMenu", "toggle_item_multistate")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// PopupMenuImplementer is an interface that implements the methods
// of the PopupMenu class.
type PopupMenuImplementer interface {
	PopupImplementer
	X_GetItems() gdnative.Array
	X_SetItems(arg0 gdnative.Array)
	X_SubmenuTimeout()
	AddCheckItem(label gdnative.String, id gdnative.Int, accel gdnative.Int)
	AddCheckShortcut(shortcut ShortCutImplementer, id gdnative.Int, global gdnative.Bool)
	AddIconCheckItem(texture TextureImplementer, label gdnative.String, id gdnative.Int, accel gdnative.Int)
	AddIconCheckShortcut(texture TextureImplementer, shortcut ShortCutImplementer, id gdnative.Int, global gdnative.Bool)
	AddIconItem(texture TextureImplementer, label gdnative.String, id gdnative.Int, accel gdnative.Int)
	AddIconShortcut(texture TextureImplementer, shortcut ShortCutImplementer, id gdnative.Int, global gdnative.Bool)
	AddItem(label gdnative.String, id gdnative.Int, accel gdnative.Int)
	AddRadioCheckItem(label gdnative.String, id gdnative.Int, accel gdnative.Int)
	AddRadioCheckShortcut(shortcut ShortCutImplementer, id gdnative.Int, global gdnative.Bool)
	AddSeparator(label gdnative.String)
	AddShortcut(shortcut ShortCutImplementer, id gdnative.Int, global gdnative.Bool)
	AddSubmenuItem(label gdnative.String, submenu gdnative.String, id gdnative.Int)
	Clear()
	GetItemAccelerator(idx gdnative.Int) gdnative.Int
	GetItemCount() gdnative.Int
	GetItemIcon(idx gdnative.Int) TextureImplementer
	GetItemId(idx gdnative.Int) gdnative.Int
	GetItemIndex(id gdnative.Int) gdnative.Int
	GetItemMetadata(idx gdnative.Int) gdnative.Variant
	GetItemShortcut(idx gdnative.Int) ShortCutImplementer
	GetItemSubmenu(idx gdnative.Int) gdnative.String
	GetItemText(idx gdnative.Int) gdnative.String
	GetItemTooltip(idx gdnative.Int) gdnative.String
	GetSubmenuPopupDelay() gdnative.Real
	IsHideOnCheckableItemSelection() gdnative.Bool
	IsHideOnItemSelection() gdnative.Bool
	IsHideOnStateItemSelection() gdnative.Bool
	IsHideOnWindowLoseFocus() gdnative.Bool
	IsItemCheckable(idx gdnative.Int) gdnative.Bool
	IsItemChecked(idx gdnative.Int) gdnative.Bool
	IsItemDisabled(idx gdnative.Int) gdnative.Bool
	IsItemRadioCheckable(idx gdnative.Int) gdnative.Bool
	IsItemSeparator(idx gdnative.Int) gdnative.Bool
	IsItemShortcutDisabled(idx gdnative.Int) gdnative.Bool
	RemoveItem(idx gdnative.Int)
	SetHideOnCheckableItemSelection(enable gdnative.Bool)
	SetHideOnItemSelection(enable gdnative.Bool)
	SetHideOnStateItemSelection(enable gdnative.Bool)
	SetHideOnWindowLoseFocus(enable gdnative.Bool)
	SetItemAccelerator(idx gdnative.Int, accel gdnative.Int)
	SetItemAsCheckable(idx gdnative.Int, enable gdnative.Bool)
	SetItemAsRadioCheckable(idx gdnative.Int, enable gdnative.Bool)
	SetItemAsSeparator(idx gdnative.Int, enable gdnative.Bool)
	SetItemChecked(idx gdnative.Int, checked gdnative.Bool)
	SetItemDisabled(idx gdnative.Int, disabled gdnative.Bool)
	SetItemIcon(idx gdnative.Int, icon TextureImplementer)
	SetItemId(idx gdnative.Int, id gdnative.Int)
	SetItemMetadata(idx gdnative.Int, metadata gdnative.Variant)
	SetItemMultistate(idx gdnative.Int, state gdnative.Int)
	SetItemShortcut(idx gdnative.Int, shortcut ShortCutImplementer, global gdnative.Bool)
	SetItemShortcutDisabled(idx gdnative.Int, disabled gdnative.Bool)
	SetItemSubmenu(idx gdnative.Int, submenu gdnative.String)
	SetItemText(idx gdnative.Int, text gdnative.String)
	SetItemTooltip(idx gdnative.Int, tooltip gdnative.String)
	SetSubmenuPopupDelay(seconds gdnative.Real)
	ToggleItemChecked(idx gdnative.Int)
	ToggleItemMultistate(idx gdnative.Int)
}
