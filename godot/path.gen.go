package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewPathFromPointer(ptr gdnative.Pointer) Path {
func newPathFromPointer(ptr gdnative.Pointer) Path {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Path{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Can have [PathFollow] child nodes moving along the [Curve3D]. See [PathFollow] for more information on the usage. Note that the path is considered as relative to the moved nodes (children of [PathFollow]). As such, the curve should usually start with a zero vector [code](0, 0, 0)[/code].
*/
type Path struct {
	Spatial
	owner gdnative.Object
}

func (o *Path) BaseClass() string {
	return "Path"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Path) X_CurveChanged() {
	//log.Println("Calling Path.X_CurveChanged()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Path", "_curve_changed")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: Curve3D
*/
func (o *Path) GetCurve() Curve3DImplementer {
	//log.Println("Calling Path.GetCurve()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Path", "get_curve")

	// Call the parent method.
	// Curve3D
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newCurve3DFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(Curve3DImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Curve3D" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(Curve3DImplementer)
	}

	return &ret
}

/*
        Undocumented
	Args: [{ false curve Curve3D}], Returns: void
*/
func (o *Path) SetCurve(curve Curve3DImplementer) {
	//log.Println("Calling Path.SetCurve()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromObject(curve.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("Path", "set_curve")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// PathImplementer is an interface that implements the methods
// of the Path class.
type PathImplementer interface {
	SpatialImplementer
	X_CurveChanged()
	GetCurve() Curve3DImplementer
	SetCurve(curve Curve3DImplementer)
}
