package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewTCP_ServerFromPointer(ptr gdnative.Pointer) TCP_Server {
func newTCP_ServerFromPointer(ptr gdnative.Pointer) TCP_Server {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := TCP_Server{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A TCP server. Listens to connections on a port and returns a [StreamPeerTCP] when it gets an incoming connection.
*/
type TCP_Server struct {
	Reference
	owner gdnative.Object
}

func (o *TCP_Server) BaseClass() string {
	return "TCP_Server"
}

/*
        Returns [code]true[/code] if a connection is available for taking.
	Args: [], Returns: bool
*/
func (o *TCP_Server) IsConnectionAvailable() gdnative.Bool {
	//log.Println("Calling TCP_Server.IsConnectionAvailable()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TCP_Server", "is_connection_available")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Listen on the [code]port[/code] binding to [code]bind_address[/code]. If [code]bind_address[/code] is set as [code]"*"[/code] (default), the server will listen on all available addresses (both IPv4 and IPv6). If [code]bind_address[/code] is set as [code]"0.0.0.0"[/code] (for IPv4) or [code]"::"[/code] (for IPv6), the server will listen on all available addresses matching that IP type. If [code]bind_address[/code] is set to any valid address (e.g. [code]"192.168.1.101"[/code], [code]"::1"[/code], etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists).
	Args: [{ false port int} {* true bind_address String}], Returns: enum.Error
*/
func (o *TCP_Server) Listen(port gdnative.Int, bindAddress gdnative.String) gdnative.Error {
	//log.Println("Calling TCP_Server.Listen()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(port)
	ptrArguments[1] = gdnative.NewPointerFromString(bindAddress)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TCP_Server", "listen")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Stops listening.
	Args: [], Returns: void
*/
func (o *TCP_Server) Stop() {
	//log.Println("Calling TCP_Server.Stop()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TCP_Server", "stop")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        If a connection is available, returns a StreamPeerTCP with the connection.
	Args: [], Returns: StreamPeerTCP
*/
func (o *TCP_Server) TakeConnection() StreamPeerTCPImplementer {
	//log.Println("Calling TCP_Server.TakeConnection()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("TCP_Server", "take_connection")

	// Call the parent method.
	// StreamPeerTCP
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newStreamPeerTCPFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(StreamPeerTCPImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "StreamPeerTCP" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(StreamPeerTCPImplementer)
	}

	return &ret
}

// TCP_ServerImplementer is an interface that implements the methods
// of the TCP_Server class.
type TCP_ServerImplementer interface {
	ReferenceImplementer
	IsConnectionAvailable() gdnative.Bool
	Stop()
	TakeConnection() StreamPeerTCPImplementer
}
