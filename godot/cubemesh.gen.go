package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewCubeMeshFromPointer(ptr gdnative.Pointer) CubeMesh {
func newCubeMeshFromPointer(ptr gdnative.Pointer) CubeMesh {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := CubeMesh{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Generate an axis-aligned cuboid [PrimitiveMesh]. The cube's UV layout is arranged in a 3Ã—2 layout that allows texturing each face individually. To apply the same texture on all faces, change the material's UV property to [code]Vector3(3, 2, 1)[/code].
*/
type CubeMesh struct {
	PrimitiveMesh
	owner gdnative.Object
}

func (o *CubeMesh) BaseClass() string {
	return "CubeMesh"
}

/*
        Undocumented
	Args: [], Returns: Vector3
*/
func (o *CubeMesh) GetSize() gdnative.Vector3 {
	//log.Println("Calling CubeMesh.GetSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMesh", "get_size")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CubeMesh) GetSubdivideDepth() gdnative.Int {
	//log.Println("Calling CubeMesh.GetSubdivideDepth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMesh", "get_subdivide_depth")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CubeMesh) GetSubdivideHeight() gdnative.Int {
	//log.Println("Calling CubeMesh.GetSubdivideHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMesh", "get_subdivide_height")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: int
*/
func (o *CubeMesh) GetSubdivideWidth() gdnative.Int {
	//log.Println("Calling CubeMesh.GetSubdivideWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMesh", "get_subdivide_width")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false size Vector3}], Returns: void
*/
func (o *CubeMesh) SetSize(size gdnative.Vector3) {
	//log.Println("Calling CubeMesh.SetSize()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(size)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMesh", "set_size")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false divisions int}], Returns: void
*/
func (o *CubeMesh) SetSubdivideDepth(divisions gdnative.Int) {
	//log.Println("Calling CubeMesh.SetSubdivideDepth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(divisions)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMesh", "set_subdivide_depth")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false divisions int}], Returns: void
*/
func (o *CubeMesh) SetSubdivideHeight(divisions gdnative.Int) {
	//log.Println("Calling CubeMesh.SetSubdivideHeight()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(divisions)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMesh", "set_subdivide_height")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false subdivide int}], Returns: void
*/
func (o *CubeMesh) SetSubdivideWidth(subdivide gdnative.Int) {
	//log.Println("Calling CubeMesh.SetSubdivideWidth()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(subdivide)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("CubeMesh", "set_subdivide_width")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// CubeMeshImplementer is an interface that implements the methods
// of the CubeMesh class.
type CubeMeshImplementer interface {
	PrimitiveMeshImplementer
	GetSize() gdnative.Vector3
	GetSubdivideDepth() gdnative.Int
	GetSubdivideHeight() gdnative.Int
	GetSubdivideWidth() gdnative.Int
	SetSize(size gdnative.Vector3)
	SetSubdivideDepth(divisions gdnative.Int)
	SetSubdivideHeight(divisions gdnative.Int)
	SetSubdivideWidth(subdivide gdnative.Int)
}
