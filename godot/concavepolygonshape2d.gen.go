package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewConcavePolygonShape2DFromPointer(ptr gdnative.Pointer) ConcavePolygonShape2D {
func newConcavePolygonShape2DFromPointer(ptr gdnative.Pointer) ConcavePolygonShape2D {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ConcavePolygonShape2D{}
	obj.SetBaseObject(owner)

	return obj
}

/*
Concave polygon 2D shape resource for physics. It is made out of segments and is optimal for complex polygonal concave collisions. However, it is not advised to use for [RigidBody2D] nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions. The main difference between a [ConvexPolygonShape2D] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.
*/
type ConcavePolygonShape2D struct {
	Shape2D
	owner gdnative.Object
}

func (o *ConcavePolygonShape2D) BaseClass() string {
	return "ConcavePolygonShape2D"
}

/*
        Undocumented
	Args: [], Returns: PoolVector2Array
*/
func (o *ConcavePolygonShape2D) GetSegments() gdnative.PoolVector2Array {
	//log.Println("Calling ConcavePolygonShape2D.GetSegments()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ConcavePolygonShape2D", "get_segments")

	// Call the parent method.
	// PoolVector2Array
	retPtr := gdnative.NewEmptyPoolVector2Array()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolVector2ArrayFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false segments PoolVector2Array}], Returns: void
*/
func (o *ConcavePolygonShape2D) SetSegments(segments gdnative.PoolVector2Array) {
	//log.Println("Calling ConcavePolygonShape2D.SetSegments()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromPoolVector2Array(segments)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ConcavePolygonShape2D", "set_segments")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ConcavePolygonShape2DImplementer is an interface that implements the methods
// of the ConcavePolygonShape2D class.
type ConcavePolygonShape2DImplementer interface {
	Shape2DImplementer
	GetSegments() gdnative.PoolVector2Array
	SetSegments(segments gdnative.PoolVector2Array)
}
