package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewMutexFromPointer(ptr gdnative.Pointer) Mutex {
func new_MutexFromPointer(ptr gdnative.Pointer) Mutex {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := Mutex{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A synchronization mutex (mutual exclusion). This is used to synchronize multiple [Thread]s, and is equivalent to a binary [Semaphore]. It guarantees that only one thread can ever acquire the lock at a time. A mutex can be used to protect a critical section; however, be careful to avoid deadlocks.
*/
type Mutex struct {
	Reference
	owner gdnative.Object
}

func (o *Mutex) BaseClass() string {
	return "_Mutex"
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Mutex) Lock() {
	//log.Println("Calling _Mutex.Lock()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Mutex", "lock")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [], Returns: enum.Error
*/
func (o *Mutex) TryLock() gdnative.Error {
	//log.Println("Calling _Mutex.TryLock()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Mutex", "try_lock")

	// Call the parent method.
	// enum.Error
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return gdnative.Error(ret)
}

/*
        Undocumented
	Args: [], Returns: void
*/
func (o *Mutex) Unlock() {
	//log.Println("Calling _Mutex.Unlock()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("_Mutex", "unlock")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// MutexImplementer is an interface that implements the methods
// of the Mutex class.
type MutexImplementer interface {
	ReferenceImplementer
	Lock()
	Unlock()
}
