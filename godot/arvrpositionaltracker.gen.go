package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

// ARVRPositionalTrackerTrackerHand is an enum for TrackerHand values.
type ARVRPositionalTrackerTrackerHand int

const (
	ARVRPositionalTrackerTrackerHandUnknown ARVRPositionalTrackerTrackerHand = 0
	ARVRPositionalTrackerTrackerLeftHand    ARVRPositionalTrackerTrackerHand = 1
	ARVRPositionalTrackerTrackerRightHand   ARVRPositionalTrackerTrackerHand = 2
)

//func NewARVRPositionalTrackerFromPointer(ptr gdnative.Pointer) ARVRPositionalTracker {
func newARVRPositionalTrackerFromPointer(ptr gdnative.Pointer) ARVRPositionalTracker {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := ARVRPositionalTracker{}
	obj.SetBaseObject(owner)

	return obj
}

/*
An instance of this object represents a device that is tracked, such as a controller or anchor point. HMDs aren't represented here as they are handled internally. As controllers are turned on and the AR/VR interface detects them, instances of this object are automatically added to this list of active tracking objects accessible through the [ARVRServer]. The [ARVRController] and [ARVRAnchor] both consume objects of this type and should be used in your project. The positional trackers are just under-the-hood objects that make this all work. These are mostly exposed so that GDNative-based interfaces can interact with them.
*/
type ARVRPositionalTracker struct {
	Object
	owner gdnative.Object
}

func (o *ARVRPositionalTracker) BaseClass() string {
	return "ARVRPositionalTracker"
}

/*
        Undocumented
	Args: [{ false joy_id int}], Returns: void
*/
func (o *ARVRPositionalTracker) X_SetJoyId(joyId gdnative.Int) {
	//log.Println("Calling ARVRPositionalTracker.X_SetJoyId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(joyId)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "_set_joy_id")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false name String}], Returns: void
*/
func (o *ARVRPositionalTracker) X_SetName(name gdnative.String) {
	//log.Println("Calling ARVRPositionalTracker.X_SetName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "_set_name")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false orientation Basis}], Returns: void
*/
func (o *ARVRPositionalTracker) X_SetOrientation(orientation gdnative.Basis) {
	//log.Println("Calling ARVRPositionalTracker.X_SetOrientation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBasis(orientation)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "_set_orientation")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false rw_position Vector3}], Returns: void
*/
func (o *ARVRPositionalTracker) X_SetRwPosition(rwPosition gdnative.Vector3) {
	//log.Println("Calling ARVRPositionalTracker.X_SetRwPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromVector3(rwPosition)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "_set_rw_position")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false type int}], Returns: void
*/
func (o *ARVRPositionalTracker) X_SetType(aType gdnative.Int) {
	//log.Println("Calling ARVRPositionalTracker.X_SetType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(aType)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "_set_type")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Returns the hand holding this tracker, if known. See [code]TRACKER_*[/code] constants.
	Args: [], Returns: enum.ARVRPositionalTracker::TrackerHand
*/
func (o *ARVRPositionalTracker) GetHand() ARVRPositionalTrackerTrackerHand {
	//log.Println("Calling ARVRPositionalTracker.GetHand()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "get_hand")

	// Call the parent method.
	// enum.ARVRPositionalTracker::TrackerHand
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ARVRPositionalTrackerTrackerHand(ret)
}

/*
        If this is a controller that is being tracked, the controller will also be represented by a joystick entry with this ID.
	Args: [], Returns: int
*/
func (o *ARVRPositionalTracker) GetJoyId() gdnative.Int {
	//log.Println("Calling ARVRPositionalTracker.GetJoyId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "get_joy_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the controller or anchor point's name if available.
	Args: [], Returns: String
*/
func (o *ARVRPositionalTracker) GetName() gdnative.String {
	//log.Println("Calling ARVRPositionalTracker.GetName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "get_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*
        Returns the controller's orientation matrix.
	Args: [], Returns: Basis
*/
func (o *ARVRPositionalTracker) GetOrientation() gdnative.Basis {
	//log.Println("Calling ARVRPositionalTracker.GetOrientation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "get_orientation")

	// Call the parent method.
	// Basis
	retPtr := gdnative.NewEmptyBasis()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBasisFromPointer(retPtr)
	return ret
}

/*
        Returns the world-space controller position.
	Args: [], Returns: Vector3
*/
func (o *ARVRPositionalTracker) GetPosition() gdnative.Vector3 {
	//log.Println("Calling ARVRPositionalTracker.GetPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "get_position")

	// Call the parent method.
	// Vector3
	retPtr := gdnative.NewEmptyVector3()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewVector3FromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *ARVRPositionalTracker) GetRumble() gdnative.Real {
	//log.Println("Calling ARVRPositionalTracker.GetRumble()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "get_rumble")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if this device tracks orientation.
	Args: [], Returns: bool
*/
func (o *ARVRPositionalTracker) GetTracksOrientation() gdnative.Bool {
	//log.Println("Calling ARVRPositionalTracker.GetTracksOrientation()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "get_tracks_orientation")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns [code]true[/code] if this device tracks position.
	Args: [], Returns: bool
*/
func (o *ARVRPositionalTracker) GetTracksPosition() gdnative.Bool {
	//log.Println("Calling ARVRPositionalTracker.GetTracksPosition()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "get_tracks_position")

	// Call the parent method.
	// bool
	retPtr := gdnative.NewEmptyBool()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewBoolFromPointer(retPtr)
	return ret
}

/*
        Returns the transform combining this device's orientation and position.
	Args: [{ false adjust_by_reference_frame bool}], Returns: Transform
*/
func (o *ARVRPositionalTracker) GetTransform(adjustByReferenceFrame gdnative.Bool) gdnative.Transform {
	//log.Println("Calling ARVRPositionalTracker.GetTransform()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromBool(adjustByReferenceFrame)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "get_transform")

	// Call the parent method.
	// Transform
	retPtr := gdnative.NewEmptyTransform()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewTransformFromPointer(retPtr)
	return ret
}

/*
        Returns the tracker's type.
	Args: [], Returns: enum.ARVRServer::TrackerType
*/
func (o *ARVRPositionalTracker) GetType() ARVRServerTrackerType {
	//log.Println("Calling ARVRPositionalTracker.GetType()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "get_type")

	// Call the parent method.
	// enum.ARVRServer::TrackerType
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ARVRServerTrackerType(ret)
}

/*
        Undocumented
	Args: [{ false rumble float}], Returns: void
*/
func (o *ARVRPositionalTracker) SetRumble(rumble gdnative.Real) {
	//log.Println("Calling ARVRPositionalTracker.SetRumble()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(rumble)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("ARVRPositionalTracker", "set_rumble")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// ARVRPositionalTrackerImplementer is an interface that implements the methods
// of the ARVRPositionalTracker class.
type ARVRPositionalTrackerImplementer interface {
	ObjectImplementer
	X_SetJoyId(joyId gdnative.Int)
	X_SetName(name gdnative.String)
	X_SetOrientation(orientation gdnative.Basis)
	X_SetRwPosition(rwPosition gdnative.Vector3)
	X_SetType(aType gdnative.Int)
	GetJoyId() gdnative.Int
	GetName() gdnative.String
	GetOrientation() gdnative.Basis
	GetPosition() gdnative.Vector3
	GetRumble() gdnative.Real
	GetTracksOrientation() gdnative.Bool
	GetTracksPosition() gdnative.Bool
	GetTransform(adjustByReferenceFrame gdnative.Bool) gdnative.Transform
	SetRumble(rumble gdnative.Real)
}
