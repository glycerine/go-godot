package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewVehicleBodyFromPointer(ptr gdnative.Pointer) VehicleBody {
func newVehicleBodyFromPointer(ptr gdnative.Pointer) VehicleBody {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := VehicleBody{}
	obj.SetBaseObject(owner)

	return obj
}

/*
This node implements all the physics logic needed to simulate a car. It is based on the raycast vehicle system commonly found in physics engines. You will need to add a [CollisionShape] for the main body of your vehicle and add [VehicleWheel] nodes for the wheels. You should also add a [MeshInstance] to this node for the 3D model of your car but this model should not include meshes for the wheels. You should control the vehicle by using the [member brake], [member engine_force], and [member steering] properties and not change the position or orientation of this node directly. [b]Note:[/b] The origin point of your VehicleBody will determine the center of gravity of your vehicle so it is better to keep this low and move the [CollisionShape] and [MeshInstance] upwards.
*/
type VehicleBody struct {
	RigidBody
	owner gdnative.Object
}

func (o *VehicleBody) BaseClass() string {
	return "VehicleBody"
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *VehicleBody) GetBrake() gdnative.Real {
	//log.Println("Calling VehicleBody.GetBrake()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VehicleBody", "get_brake")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *VehicleBody) GetEngineForce() gdnative.Real {
	//log.Println("Calling VehicleBody.GetEngineForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VehicleBody", "get_engine_force")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [], Returns: float
*/
func (o *VehicleBody) GetSteering() gdnative.Real {
	//log.Println("Calling VehicleBody.GetSteering()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VehicleBody", "get_steering")

	// Call the parent method.
	// float
	retPtr := gdnative.NewEmptyReal()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewRealFromPointer(retPtr)
	return ret
}

/*
        Undocumented
	Args: [{ false brake float}], Returns: void
*/
func (o *VehicleBody) SetBrake(brake gdnative.Real) {
	//log.Println("Calling VehicleBody.SetBrake()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(brake)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VehicleBody", "set_brake")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false engine_force float}], Returns: void
*/
func (o *VehicleBody) SetEngineForce(engineForce gdnative.Real) {
	//log.Println("Calling VehicleBody.SetEngineForce()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(engineForce)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VehicleBody", "set_engine_force")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Undocumented
	Args: [{ false steering float}], Returns: void
*/
func (o *VehicleBody) SetSteering(steering gdnative.Real) {
	//log.Println("Calling VehicleBody.SetSteering()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromReal(steering)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("VehicleBody", "set_steering")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// VehicleBodyImplementer is an interface that implements the methods
// of the VehicleBody class.
type VehicleBodyImplementer interface {
	RigidBodyImplementer
	GetBrake() gdnative.Real
	GetEngineForce() gdnative.Real
	GetSteering() gdnative.Real
	SetBrake(brake gdnative.Real)
	SetEngineForce(engineForce gdnative.Real)
	SetSteering(steering gdnative.Real)
}
