package godot

import (
	"github.com/shadowapex/godot-go/gdnative"
)

/*------------------------------------------------------------------------------
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "class.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//func NewMeshLibraryFromPointer(ptr gdnative.Pointer) MeshLibrary {
func newMeshLibraryFromPointer(ptr gdnative.Pointer) MeshLibrary {
	owner := gdnative.NewObjectFromPointer(ptr)
	obj := MeshLibrary{}
	obj.SetBaseObject(owner)

	return obj
}

/*
A library of meshes. Contains a list of [Mesh] resources, each with a name and ID. This resource is used in [GridMap].
*/
type MeshLibrary struct {
	Resource
	owner gdnative.Object
}

func (o *MeshLibrary) BaseClass() string {
	return "MeshLibrary"
}

/*
        Clears the library.
	Args: [], Returns: void
*/
func (o *MeshLibrary) Clear() {
	//log.Println("Calling MeshLibrary.Clear()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "clear")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Create a new item in the library, supplied as an ID.
	Args: [{ false id int}], Returns: void
*/
func (o *MeshLibrary) CreateItem(id gdnative.Int) {
	//log.Println("Calling MeshLibrary.CreateItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "create_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false name String}], Returns: int
*/
func (o *MeshLibrary) FindItemByName(name gdnative.String) gdnative.Int {
	//log.Println("Calling MeshLibrary.FindItemByName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "find_item_by_name")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Returns the list of items.
	Args: [], Returns: PoolIntArray
*/
func (o *MeshLibrary) GetItemList() gdnative.PoolIntArray {
	//log.Println("Calling MeshLibrary.GetItemList()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_list")

	// Call the parent method.
	// PoolIntArray
	retPtr := gdnative.NewEmptyPoolIntArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewPoolIntArrayFromPointer(retPtr)
	return ret
}

/*
        Returns the mesh of the item.
	Args: [{ false id int}], Returns: Mesh
*/
func (o *MeshLibrary) GetItemMesh(id gdnative.Int) MeshImplementer {
	//log.Println("Calling MeshLibrary.GetItemMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_mesh")

	// Call the parent method.
	// Mesh
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newMeshFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(MeshImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Mesh" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(MeshImplementer)
	}

	return &ret
}

/*
        Returns the name of the item.
	Args: [{ false id int}], Returns: String
*/
func (o *MeshLibrary) GetItemName(id gdnative.Int) gdnative.String {
	//log.Println("Calling MeshLibrary.GetItemName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_name")

	// Call the parent method.
	// String
	retPtr := gdnative.NewEmptyString()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewStringFromPointer(retPtr)
	return ret
}

/*

	Args: [{ false id int}], Returns: NavigationMesh
*/
func (o *MeshLibrary) GetItemNavmesh(id gdnative.Int) NavigationMeshImplementer {
	//log.Println("Calling MeshLibrary.GetItemNavmesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_navmesh")

	// Call the parent method.
	// NavigationMesh
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newNavigationMeshFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(NavigationMeshImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "NavigationMesh" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(NavigationMeshImplementer)
	}

	return &ret
}

/*
        Returns a generated item preview (a 3D rendering in isometric perspective). [b]Note:[/b] Since item previews are only generated in an editor context, this function will return an empty [Texture] in a running project.
	Args: [{ false id int}], Returns: Texture
*/
func (o *MeshLibrary) GetItemPreview(id gdnative.Int) TextureImplementer {
	//log.Println("Calling MeshLibrary.GetItemPreview()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_preview")

	// Call the parent method.
	// Texture
	retPtr := gdnative.NewEmptyObject()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := newTextureFromPointer(retPtr)

	// Check to see if we already have an instance of this object in our Go instance registry.
	if instance, ok := InstanceRegistry.Get(ret.GetBaseObject().ID()); ok {
		return instance.(TextureImplementer)
	}

	// Check to see what kind of class this is and create it. This is generally used with
	// GetNode().
	className := ret.GetClass()
	if className != "Texture" {
		actualRet := getActualClass(className, ret.GetBaseObject())
		return actualRet.(TextureImplementer)
	}

	return &ret
}

/*

	Args: [{ false id int}], Returns: Array
*/
func (o *MeshLibrary) GetItemShapes(id gdnative.Int) gdnative.Array {
	//log.Println("Calling MeshLibrary.GetItemShapes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_item_shapes")

	// Call the parent method.
	// Array
	retPtr := gdnative.NewEmptyArray()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewArrayFromPointer(retPtr)
	return ret
}

/*
        Gets an unused ID for a new item.
	Args: [], Returns: int
*/
func (o *MeshLibrary) GetLastUnusedItemId() gdnative.Int {
	//log.Println("Calling MeshLibrary.GetLastUnusedItemId()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 0, 0)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "get_last_unused_item_id")

	// Call the parent method.
	// int
	retPtr := gdnative.NewEmptyInt()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

	// If we have a return type, convert it from a pointer into its actual object.
	ret := gdnative.NewIntFromPointer(retPtr)
	return ret
}

/*
        Removes the item.
	Args: [{ false id int}], Returns: void
*/
func (o *MeshLibrary) RemoveItem(id gdnative.Int) {
	//log.Println("Calling MeshLibrary.RemoveItem()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 1, 1)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "remove_item")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the item's mesh.
	Args: [{ false id int} { false mesh Mesh}], Returns: void
*/
func (o *MeshLibrary) SetItemMesh(id gdnative.Int, mesh MeshImplementer) {
	//log.Println("Calling MeshLibrary.SetItemMesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromObject(mesh.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "set_item_mesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*
        Sets the item's name.
	Args: [{ false id int} { false name String}], Returns: void
*/
func (o *MeshLibrary) SetItemName(id gdnative.Int, name gdnative.String) {
	//log.Println("Calling MeshLibrary.SetItemName()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromString(name)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "set_item_name")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false id int} { false navmesh NavigationMesh}], Returns: void
*/
func (o *MeshLibrary) SetItemNavmesh(id gdnative.Int, navmesh NavigationMeshImplementer) {
	//log.Println("Calling MeshLibrary.SetItemNavmesh()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromObject(navmesh.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "set_item_navmesh")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false id int} { false texture Texture}], Returns: void
*/
func (o *MeshLibrary) SetItemPreview(id gdnative.Int, texture TextureImplementer) {
	//log.Println("Calling MeshLibrary.SetItemPreview()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromObject(texture.GetBaseObject())

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "set_item_preview")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

/*

	Args: [{ false id int} { false shapes Array}], Returns: void
*/
func (o *MeshLibrary) SetItemShapes(id gdnative.Int, shapes gdnative.Array) {
	//log.Println("Calling MeshLibrary.SetItemShapes()")

	// Build out the method's arguments
	ptrArguments := make([]gdnative.Pointer, 2, 2)
	ptrArguments[0] = gdnative.NewPointerFromInt(id)
	ptrArguments[1] = gdnative.NewPointerFromArray(shapes)

	// Get the method bind
	methodBind := gdnative.NewMethodBind("MeshLibrary", "set_item_shapes")

	// Call the parent method.
	// void
	retPtr := gdnative.NewEmptyVoid()
	gdnative.MethodBindPtrCall(methodBind, o.GetBaseObject(), ptrArguments, retPtr)

}

// MeshLibraryImplementer is an interface that implements the methods
// of the MeshLibrary class.
type MeshLibraryImplementer interface {
	ResourceImplementer
	Clear()
	CreateItem(id gdnative.Int)
	FindItemByName(name gdnative.String) gdnative.Int
	GetItemList() gdnative.PoolIntArray
	GetItemMesh(id gdnative.Int) MeshImplementer
	GetItemName(id gdnative.Int) gdnative.String
	GetItemNavmesh(id gdnative.Int) NavigationMeshImplementer
	GetItemPreview(id gdnative.Int) TextureImplementer
	GetItemShapes(id gdnative.Int) gdnative.Array
	GetLastUnusedItemId() gdnative.Int
	RemoveItem(id gdnative.Int)
	SetItemMesh(id gdnative.Int, mesh MeshImplementer)
	SetItemName(id gdnative.Int, name gdnative.String)
	SetItemNavmesh(id gdnative.Int, navmesh NavigationMeshImplementer)
	SetItemPreview(id gdnative.Int, texture TextureImplementer)
	SetItemShapes(id gdnative.Int, shapes gdnative.Array)
}
